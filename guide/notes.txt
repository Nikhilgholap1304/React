Virtual Dom was react's own tree

Hidration is the process of injecting the javascript in to an web template.

The fibre is an algorithm which updates the virtual dom.

Reconciliation is an algorithm behind virtual dom.

Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." A high-level description goes something like this: when you render a React application, a tree of nodes that describes the app is generated and saved in memory. This tree is then flushed to the rendering environment — for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated (usually via setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.

  In simpler words - Reconcilation is an algorthm which is used to mount the virtual dom.
Whenever state has changed it generates new tree and will only try to modify the dom according to the difference it finds between browsers DOM and reacts virtual DOM and not the entire of browsers DOM like github commits and changes.
Hence react is pretty much optimized because it selectively update the changes not the entire DOM via virtual DOM.

DOM is nothing but one of the rendering environments react can render to 

Props makes the component reusable


useCallback
useCallback is a React Hook that lets you cache a function definition between re-renders.

const cachedFn = useCallback(fn, dependencies)
Reference
useCallback(fn, dependencies)
Usage
Skipping re-rendering of components
Updating state from a memoized callback
Preventing an Effect from firing too often
Optimizing a custom Hook

On the initial render, useCallback returns the fn function you have passed.

During subsequent renders, it will either return an already stored fn  function from the last render (if the dependencies haven’t changed), or return the fn function you have passed during this render